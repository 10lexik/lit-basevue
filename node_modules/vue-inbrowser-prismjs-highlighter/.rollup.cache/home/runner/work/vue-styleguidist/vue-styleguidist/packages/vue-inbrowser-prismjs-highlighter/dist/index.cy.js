import { __awaiter, __generator, __makeTemplateObject } from "tslib";
import { mount } from 'cypress/vue2';
import 'prismjs/themes/prism-coy.css';
import dedent from 'dedent';
import './index.cy.css';
import getHighlighter from './index';
var highlight;
describe('VueInbrowserPrismjsHighlighter', function () {
    before(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getHighlighter('error-squiggles')];
                case 1:
                    highlight = _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('highlights code from vue sfc components', function () {
        var code = dedent(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    <script lang=\"ts\">\n    let a:number = 1\n\n    // now what if a line would come to wrap like this or like that?\n    type A = {\n      a: number\n    }\n\n    export default \n    </script>\n    <template>\n      <div>\n        {{ a }}\n      </div>\n    </template>"], ["\n    <script lang=\"ts\">\n    let a:number = 1\n\n    // now what if a line would come to wrap like this or like that?\n    type A = {\n      a: number\n    }\n\n    export default \n    </script>\n    <template>\n      <div>\n        {{ a }}\n      </div>\n    </template>"])));
        mount({
            data: function () { return ({
                html: highlight('vue-sfc')(code)
            }); },
            template: "<pre v-html=\"html\" />"
        });
        cy.get('pre').should('have.text', code);
    });
    it('highlights code from vsg examples with errors', function () {
        var code = dedent(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    let a = 1\n    <div>\n      {{ a }}\n    </div>"], ["\n    let a = 1\n    <div>\n      {{ a }}\n    </div>"])));
        var errorLoc = {
            start: {
                line: 0,
                column: 0
            },
            end: {
                line: 0,
                column: 5
            }
        };
        mount({
            data: function () { return ({
                html: highlight('vsg')(code, errorLoc)
            }); },
            template: "<pre v-html=\"html\" />"
        });
        cy.get('pre').should('have.text', "     ".concat(code));
    });
});
var templateObject_1, templateObject_2;
//# sourceMappingURL=index.cy.js.map